[tool.poetry]
name = "cursor-bridge"
version = "0.1.0"
description = "无缝远程开发桥梁 - 为Cursor IDE提供企业级远程终端访问解决方案"
authors = ["maricoxu <maricoxu@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/maricoxu/cursor-bridge"
repository = "https://github.com/maricoxu/cursor-bridge"
documentation = "https://cursor-bridge.readthedocs.io"
keywords = ["cursor", "bridge", "remote", "terminal", "ssh", "development", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Tools",
    "Topic :: System :: Networking",
    "Topic :: Terminals",
]

[tool.poetry.dependencies]
python = "^3.9"
# MCP相关
mcp = "^1.0.0"
pydantic = "^2.0.0"
# 异步和网络
asyncio-mqtt = "^0.16.0"
aiofiles = "^23.0.0"
httpx = "^0.27.0"
websockets = "^12.0"
# SSH和终端
paramiko = "^3.4.0"
pexpect = "^4.9.0"
asyncssh = "^2.14.0"
# 配置和序列化
pyyaml = "^6.0.1"
toml = "^0.10.2"
# 日志和监控
structlog = "^23.2.0"
prometheus-client = "^0.19.0"
# 工具库
click = "^8.1.7"
rich = "^13.7.0"
typer = "^0.9.0"

[tool.poetry.group.dev.dependencies]
# 测试
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
# 代码质量
black = "^23.12.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
bandit = "^1.7.5"
# 开发工具
pre-commit = "^3.6.0"
commitizen = "^3.13.0"
# 文档
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.0"
mkdocstrings = "^0.24.0"

[tool.poetry.group.docker.dependencies]
gunicorn = "^21.2.0"
uvicorn = "^0.25.0"

[tool.poetry.scripts]
cursor-bridge = "cursor_bridge.cli:main"
cbridge = "cursor_bridge.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cursor_bridge"]
known_third_party = ["mcp", "pydantic", "paramiko", "pexpect"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pexpect.*",
    "paramiko.*",
    "asyncssh.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ssh: marks tests that require SSH connection",
    "proxy: marks tests that require enterprise VPN tools",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/cursor_bridge/__init__.py:__version__",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]