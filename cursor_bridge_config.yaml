# Cursor Bridge 本地tmux配置
# 适用于本地tmux会话中已建立远程连接的场景

# 服务器配置 - 基于本地tmux会话
servers:
  # 百度内网服务器 - 通过本地tmux中的relay-cli连接
  baidu-server:
    type: local_tmux
    tmux:
      # 本地tmux会话名称（你手动创建的）
      session_name: "baidu-session"
      window_name: "relay-cli"
      # 这个tmux会话运行在本地，但内部已经通过relay-cli连接到远程
    
    session:
      name: "baidu-session"
      # 注意：这里的工作目录是远程服务器上的路径
      # 因为命令最终在远程服务器上执行
      working_directory: "/workspace"
      environment:
        # 远程服务器的环境变量
        TERM: "xterm-256color"
        LANG: "en_US.UTF-8"
        CUDA_VISIBLE_DEVICES: "0,1,2,3"
        PYTHONPATH: "/workspace:/workspace/src"
        PROJECT_ROOT: "/workspace"
        MODEL_PATH: "/workspace/models"
      shell: "/bin/bash"

  # 如果你有多个连接，可以创建多个tmux会话
  baidu-gpu:
    type: local_tmux
    tmux:
      session_name: "baidu-gpu-session"
      window_name: "relay-cli"
    
    session:
      name: "baidu-gpu-session"
      working_directory: "/workspace/training"
      environment:
        TERM: "xterm-256color"
        CUDA_VISIBLE_DEVICES: "0,1,2,3,4,5,6,7"
        PYTHONPATH: "/workspace/training"
        NCCL_DEBUG: "INFO"
        WANDB_PROJECT: "my-training"
        HF_HOME: "/workspace/.cache/huggingface"
      shell: "/bin/bash"

# 默认服务器
default_server: "baidu-server"

# 本地tmux操作配置
local_tmux:
  # tmux命令路径
  tmux_command: "tmux"
  
  # 命令发送方式
  send_keys_method: "send-keys"
  
  # 输出捕获方式
  capture_method: "capture-pane"
  
  # 等待命令完成的时间（秒）
  command_wait_time: 1
  
  # 输出捕获延迟（秒）
  capture_delay: 0.5

# 会话管理配置
session_management:
  # 不自动创建会话（因为是手动创建的）
  auto_create: false
  
  # 会话检查命令
  session_check_command: "tmux list-sessions"
  
  # 命令超时时间（秒）
  command_timeout: 300
  
  # 最大输出大小（字节）
  max_output_size: 10485760

# 安全配置
security:
  # 允许的命令（白名单）
  allowed_commands:
    # 基础命令
    - "ls"
    - "pwd"
    - "cd"
    - "cat"
    - "head"
    - "tail"
    - "grep"
    - "find"
    - "which"
    - "whoami"
    - "echo"
    
    # 文件操作
    - "mkdir"
    - "touch"
    - "cp"
    - "mv"
    - "rm"
    - "chmod"
    - "chown"
    - "ln"
    
    # 开发工具
    - "git"
    - "python"
    - "python3"
    - "pip"
    - "conda"
    - "node"
    - "npm"
    - "yarn"
    - "docker"
    - "kubectl"
    
    # 编译和构建
    - "make"
    - "cmake"
    - "gcc"
    - "g++"
    - "nvcc"
    - "cargo"
    - "go"
    
    # 系统监控
    - "ps"
    - "top"
    - "htop"
    - "nvidia-smi"
    - "df"
    - "du"
    - "free"
    - "lscpu"
    - "uptime"
    - "iostat"
    
    # 网络工具
    - "ping"
    - "curl"
    - "wget"
    - "ssh"
    - "scp"
    - "rsync"
    
    # 文本处理
    - "vim"
    - "nano"
    - "emacs"
    - "sed"
    - "awk"
    - "sort"
    - "uniq"
    - "wc"
    - "tr"
    - "cut"
    
    # 压缩解压
    - "tar"
    - "gzip"
    - "gunzip"
    - "zip"
    - "unzip"
    
    # 进程管理
    - "nohup"
    - "screen"
    - "tmux"
    - "jobs"
    - "fg"
    - "bg"
    - "kill"
    - "killall"
  
  # 禁止的命令（黑名单）
  blocked_commands:
    - "rm -rf /"
    - "sudo rm -rf"
    - "mkfs"
    - "fdisk"
    - "dd if="
    - ":(){ :|:& };:"  # fork bomb
    - "sudo shutdown"
    - "sudo reboot"
    - "sudo halt"
  
  # 命令超时时间（秒）
  command_timeout: 300
  
  # 最大输出大小（字节）
  max_output_size: 10485760
  
  # 最大并发命令数
  max_concurrent_commands: 3

# 日志配置
logging:
  level: "INFO"
  file: "/tmp/cursor-bridge-local-tmux.log"
  max_size: "10MB"
  backup_count: 5
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# 监控配置
monitoring:
  # 健康检查间隔（秒）
  health_check_interval: 60
  
  # 连接检查命令（在tmux会话中执行）
  health_check_command: "echo 'health_check_ok'"
  
  # tmux会话检查
  tmux_session_check: true
  
  # 性能监控
  enable_metrics: true
  metrics_interval: 30

# 常用命令和目录配置
user_shortcuts:
  # 常用目录
  directories:
    home: "/home"
    code: "/home/Code"
    projects: "/home/Code"
    logs: "/var/log"
    config: "/etc"
    workspace: "/workspace"
    models: "/workspace/models"
    data: "/workspace/data"
    scripts: "/home/scripts"
    
  # 常用命令
  commands:
    # 系统监控
    system_status:
      description: "检查系统状态"
      command: "df -h && free -h && ps aux | head -10"
      
    gpu_status:
      description: "检查GPU状态"
      command: "nvidia-smi"
      
    memory_usage:
      description: "查看内存使用情况"
      command: "free -h && ps aux --sort=-%mem | head -10"
      
    disk_usage:
      description: "查看磁盘使用情况"
      command: "df -h && du -sh /home/* 2>/dev/null | sort -hr | head -10"
      
    # 开发相关
    python_env:
      description: "检查Python环境"
      command: "python --version && which python && pip list | head -10"
      
    git_status:
      description: "检查git状态"
      command: "git status && git log --oneline -5"
      
    docker_status:
      description: "检查Docker状态"
      command: "docker ps && docker images | head -5"
      
    # 日志查看
    recent_logs:
      description: "查看最近的系统日志"
      command: "tail -50 /var/log/syslog 2>/dev/null || journalctl -n 50"
      
    error_logs:
      description: "查找错误日志"
      command: "grep -i error /var/log/* 2>/dev/null | tail -10"
      
    # 网络相关
    network_status:
      description: "检查网络状态"
      command: "ip addr show && netstat -tuln | head -10"
      
    # 进程管理
    top_processes:
      description: "查看占用资源最多的进程"
      command: "ps aux --sort=-%cpu | head -10"
      
  # 快捷操作组合
  workflows:
    full_system_check:
      description: "完整的系统检查"
      commands:
        - "system_status"
        - "gpu_status"
        - "disk_usage"
        - "top_processes"
        
    dev_environment_check:
      description: "开发环境检查"
      commands:
        - "python_env"
        - "git_status"
        - "docker_status"
        
    troubleshooting:
      description: "故障排查"
      commands:
        - "recent_logs"
        - "error_logs"
        - "memory_usage"
        - "network_status"

# 智能命令建议
command_suggestions:
  # 基于关键词的命令建议
  keywords:
    "检查": ["system_status", "gpu_status", "python_env"]
    "查看": ["disk_usage", "memory_usage", "recent_logs"]
    "监控": ["top_processes", "network_status", "gpu_status"]
    "状态": ["system_status", "git_status", "docker_status"]
    "日志": ["recent_logs", "error_logs"]
    "GPU": ["gpu_status"]
    "内存": ["memory_usage"]
    "磁盘": ["disk_usage"]
    "网络": ["network_status"]
    "Python": ["python_env"]
    "Git": ["git_status"]
    "Docker": ["docker_status"]

# 智能项目管理系统
project_management:
  # 当前活跃项目
  current_project: "xmlir"
  
  # 项目列表
  projects:
    # XMLIR项目
    xmlir:
      name: "XMLIR"
      description: "百度XPU XMLIR编译器项目"
      path: "/home/Code/baidu/xpu/XMLIR"
      keywords: ["xmlir", "XMLIR", "编译器", "compiler", "xpu"]
      
      # 项目特定命令
      commands:
        build:
          description: "编译XMLIR项目"
          command: "cd /home/Code/baidu/xpu/XMLIR && bash script/build/cmake_build.sh -p"
          
        clean_build:
          description: "清理并重新编译"
          command: "cd /home/Code/baidu/xpu/XMLIR && rm -rf build && bash script/build/cmake_build.sh -p"
          
        test:
          description: "运行测试"
          command: "cd /home/Code/baidu/xpu/XMLIR && bash script/test/run_tests.sh"
          
        status:
          description: "检查项目状态"
          command: "cd /home/Code/baidu/xpu/XMLIR && git status && ls -la"
          
        setup:
          description: "设置开发环境"
          command: "cd /home/Code/baidu/xpu/XMLIR && source setup_env.sh"
      
      # 项目环境变量
      environment:
        PROJECT_ROOT: "/home/Code/baidu/xpu/XMLIR"
        BUILD_TYPE: "Release"
        CMAKE_BUILD_PARALLEL_LEVEL: "8"
    
    # Hydra项目
    hydra:
      name: "Hydra"
      description: "百度XPU Hydra项目"
      path: "/home/Code/baidu/xpu/Hydra"
      keywords: ["hydra", "Hydra", "xpu"]
      
      commands:
        build:
          description: "编译Hydra项目"
          command: "cd /home/Code/baidu/xpu/Hydra && make build"
          
        status:
          description: "检查项目状态"
          command: "cd /home/Code/baidu/xpu/Hydra && git status"
      
      environment:
        PROJECT_ROOT: "/home/Code/baidu/xpu/Hydra"
    
    # xBLAS项目
    xblas:
      name: "xBLAS"
      description: "百度XPU xBLAS项目"
      path: "/home/Code/baidu/xpu/xBLAS"
      keywords: ["xblas", "xBLAS", "BLAS", "线性代数"]
      
      commands:
        build:
          description: "编译xBLAS项目"
          command: "cd /home/Code/baidu/xpu/xBLAS && make"
          
        status:
          description: "检查项目状态"
          command: "cd /home/Code/baidu/xpu/xBLAS && git status"
      
      environment:
        PROJECT_ROOT: "/home/Code/baidu/xpu/xBLAS"
    
    # PyTorch项目
    pytorch:
      name: "PyTorch"
      description: "PyTorch深度学习框架"
      path: "/home/Code/pytorch"
      keywords: ["pytorch", "PyTorch", "深度学习", "机器学习", "AI"]
      
      commands:
        build:
          description: "编译PyTorch"
          command: "cd /home/Code/pytorch && python setup.py build"
          
        install:
          description: "安装PyTorch"
          command: "cd /home/Code/pytorch && python setup.py install"
          
        test:
          description: "运行PyTorch测试"
          command: "cd /home/Code/pytorch && python -m pytest test/"
          
        status:
          description: "检查项目状态"
          command: "cd /home/Code/pytorch && git status"
      
      environment:
        PROJECT_ROOT: "/home/Code/pytorch"
        USE_CUDA: "1"
        USE_CUDNN: "1"
    
    # Megatron-LM项目
    megatron:
      name: "Megatron-LM"
      description: "大规模语言模型训练框架"
      path: "/home/Code/Megatron-LM"
      keywords: ["megatron", "Megatron", "LLM", "大模型", "训练"]
      
      commands:
        train:
          description: "开始训练"
          command: "cd /home/Code/Megatron-LM && bash examples/gpt3/train_gpt3.sh"
          
        status:
          description: "检查项目状态"
          command: "cd /home/Code/Megatron-LM && git status"
      
      environment:
        PROJECT_ROOT: "/home/Code/Megatron-LM"
    
    # Flux项目
    flux:
      name: "Flux"
      description: "Flux项目"
      path: "/home/Code/flux"
      keywords: ["flux", "Flux"]
      
      commands:
        build:
          description: "编译Flux项目"
          command: "cd /home/Code/flux && make"
          
        status:
          description: "检查项目状态"
          command: "cd /home/Code/flux && git status"
      
      environment:
        PROJECT_ROOT: "/home/Code/flux"

  # 项目智能识别规则
  project_detection:
    # 基于关键词的项目识别
    keyword_matching:
      enabled: true
      confidence_threshold: 0.7
      
    # 基于上下文的项目识别
    context_matching:
      enabled: true
      # 记住最近讨论的项目
      recent_projects_memory: 5
      
    # 基于目录路径的项目识别
    path_matching:
      enabled: true
      
  # 项目切换行为
  project_switching:
    # 自动切换到项目目录
    auto_change_directory: true
    
    # 自动设置项目环境变量
    auto_set_environment: true
    
    # 显示项目切换确认
    show_switch_confirmation: true
    
    # 项目切换时执行的命令
    on_switch_commands:
      - "pwd"
      - "ls -la"

  # 项目状态管理
  project_state:
    # 记录项目工作状态
    track_working_state: true
    
    # 项目状态文件路径
    state_file: "/tmp/cursor_bridge_project_state.json"
    
    # 自动保存状态间隔（秒）
    auto_save_interval: 300 